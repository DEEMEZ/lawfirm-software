generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cases {
  id                 String      @id
  law_firm_id        String
  client_id          String
  title              String
  description        String?
  status             CaseStatus  @default(OPEN)
  practice_area      String?
  assigned_lawyer_id String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime
  clients            clients     @relation(fields: [client_id], references: [id], onDelete: Cascade)
  law_firms          law_firms   @relation(fields: [law_firm_id], references: [id], onDelete: Cascade)
  documents          documents[]
}

model clients {
  id          String      @id
  law_firm_id String
  email       String
  first_name  String
  last_name   String
  phone       String?
  address     Json?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  cases       cases[]
  law_firms   law_firms   @relation(fields: [law_firm_id], references: [id], onDelete: Cascade)
  documents   documents[]

  @@unique([law_firm_id, email])
}

model documents {
  id          String    @id
  law_firm_id String
  case_id     String?
  client_id   String?
  name        String
  description String?
  file_path   String
  file_size   BigInt
  mime_type   String
  uploaded_by String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  cases       cases?    @relation(fields: [case_id], references: [id])
  clients     clients?  @relation(fields: [client_id], references: [id])
  law_firms   law_firms @relation(fields: [law_firm_id], references: [id], onDelete: Cascade)
}

model law_firms {
  id         String       @id
  name       String
  slug       String       @unique
  domain     String?      @unique
  isActive   Boolean      @default(true)
  plan       FirmPlan     @default(STARTER)
  settings   Json?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  cases      cases[]
  clients    clients[]
  documents  documents[]
  roles      roles[]
  user_roles user_roles[]
  users      users[]
}

model platform_users {
  id        String   @id
  email     String   @unique
  password  String
  name      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     users[]
}

model roles {
  id          String       @id
  law_firm_id String
  name        String
  description String?
  permissions Json
  isSystem    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  law_firms   law_firms    @relation(fields: [law_firm_id], references: [id], onDelete: Cascade)
  user_roles  user_roles[]

  @@unique([law_firm_id, name])
}

model user_roles {
  id          String    @id
  law_firm_id String
  user_id     String
  role_id     String
  assignedAt  DateTime  @default(now())
  assigned_by String?
  law_firms   law_firms @relation(fields: [law_firm_id], references: [id], onDelete: Cascade)
  roles       roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([law_firm_id, user_id, role_id])
}

model users {
  id               String         @id
  law_firm_id      String
  platform_user_id String
  isActive         Boolean        @default(true)
  invitedAt        DateTime       @default(now())
  joinedAt         DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  user_roles       user_roles[]
  law_firms        law_firms      @relation(fields: [law_firm_id], references: [id], onDelete: Cascade)
  platform_users   platform_users @relation(fields: [platform_user_id], references: [id], onDelete: Cascade)

  @@unique([law_firm_id, platform_user_id])
}

enum CaseStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  ARCHIVED
}

enum FirmPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}
