-- =====================================================
-- LAW FIRM MANAGEMENT PLATFORM - SaaS DATABASE SCHEMA
-- Multi-Tenant Architecture with Super Admin Control
-- =====================================================

-- =====================================================
-- 1. PLATFORM MANAGEMENT (Super Admin Level)
-- =====================================================

-- Platform configuration and settings
CREATE TABLE platform_settings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    key VARCHAR(100) UNIQUE NOT NULL,
    value JSONB NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Platform users (Super Admin, Support Staff)
CREATE TABLE platform_users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    role VARCHAR(50) NOT NULL DEFAULT 'support', -- super_admin, support, billing_admin
    permissions JSONB DEFAULT '[]', -- platform-level permissions
    is_active BOOLEAN DEFAULT true,
    last_login_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Platform sessions for super admin authentication
CREATE TABLE platform_sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    platform_user_id UUID NOT NULL REFERENCES platform_users(id) ON DELETE CASCADE,
    session_token VARCHAR(255) UNIQUE NOT NULL,
    ip_address INET,
    user_agent TEXT,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Subscription plans available on the platform
CREATE TABLE subscription_plans (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL,
    slug VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    price_monthly DECIMAL(10,2),
    price_yearly DECIMAL(10,2),
    max_users INTEGER,
    max_cases INTEGER,
    max_storage_gb INTEGER,
    features JSONB DEFAULT '[]', -- array of included features
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 2. LAW FIRM MANAGEMENT (Organization Level)
-- =====================================================

-- Law firms (tenants) on the platform
CREATE TABLE law_firms (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    slug VARCHAR(100) UNIQUE NOT NULL, -- for subdomain/url routing
    logo_url VARCHAR(500),
    address TEXT,
    phone VARCHAR(20),
    email VARCHAR(255),
    website VARCHAR(255),
    timezone VARCHAR(50) DEFAULT 'UTC',
    
    -- Subscription details
    subscription_plan_id UUID REFERENCES subscription_plans(id),
    subscription_status VARCHAR(20) DEFAULT 'trial', -- trial, active, suspended, cancelled
    subscription_started_at TIMESTAMP WITH TIME ZONE,
    subscription_ends_at TIMESTAMP WITH TIME ZONE,
    
    -- Billing information
    billing_email VARCHAR(255),
    billing_address TEXT,
    stripe_customer_id VARCHAR(255),
    
    -- Usage limits and tracking
    max_users INTEGER DEFAULT 10,
    max_cases INTEGER DEFAULT 100,
    max_storage_gb INTEGER DEFAULT 5,
    current_user_count INTEGER DEFAULT 0,
    current_case_count INTEGER DEFAULT 0,
    current_storage_gb DECIMAL(10,2) DEFAULT 0,
    
    -- Platform management
    onboarded_by UUID REFERENCES platform_users(id),
    is_active BOOLEAN DEFAULT true,
    settings JSONB DEFAULT '{}', -- firm-specific settings
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Law firm billing history
CREATE TABLE law_firm_billing (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    subscription_plan_id UUID REFERENCES subscription_plans(id),
    billing_period_start DATE NOT NULL,
    billing_period_end DATE NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    tax_amount DECIMAL(10,2) DEFAULT 0,
    total_amount DECIMAL(10,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'USD',
    status VARCHAR(20) DEFAULT 'pending', -- pending, paid, failed, refunded
    stripe_invoice_id VARCHAR(255),
    paid_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Platform-level audit logs for super admin activities
CREATE TABLE platform_audit_logs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    platform_user_id UUID REFERENCES platform_users(id),
    law_firm_id UUID REFERENCES law_firms(id), -- if action was on a specific firm
    action VARCHAR(100) NOT NULL,
    entity_type VARCHAR(50) NOT NULL, -- law_firm, subscription, user, etc.
    entity_id UUID,
    old_values JSONB,
    new_values JSONB,
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Workspaces within law firms (departments, teams, practice areas)
CREATE TABLE workspaces (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    workspace_type VARCHAR(50) DEFAULT 'department', -- department, team, practice_area
    parent_workspace_id UUID REFERENCES workspaces(id), -- for hierarchical workspaces
    settings JSONB DEFAULT '{}',
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 3. LAW FIRM USER MANAGEMENT
-- =====================================================

-- Users within law firms (lawyers, staff, clients)
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    email VARCHAR(255) NOT NULL, -- unique within firm context
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    avatar_url VARCHAR(500),
    employee_id VARCHAR(50), -- internal employee ID
    bar_license_number VARCHAR(100), -- for lawyers
    specializations TEXT[], -- legal specializations
    user_type VARCHAR(20) DEFAULT 'internal', -- internal, client
    is_active BOOLEAN DEFAULT true,
    email_verified BOOLEAN DEFAULT false,
    last_login_at TIMESTAMP WITH TIME ZONE,
    password_changed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(law_firm_id, email) -- email unique within each law firm
);

-- Password reset tokens for law firm users
CREATE TABLE password_reset_tokens (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    token VARCHAR(255) UNIQUE NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    used_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- User sessions for law firm users
CREATE TABLE user_sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    session_token VARCHAR(255) UNIQUE NOT NULL,
    refresh_token VARCHAR(255) UNIQUE,
    ip_address INET,
    user_agent TEXT,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    last_activity_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 4. ROLE-BASED ACCESS CONTROL (Multi-Level)
-- =====================================================

-- Define permissions available in the system
CREATE TABLE permissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) UNIQUE NOT NULL,
    slug VARCHAR(100) UNIQUE NOT NULL,
    category VARCHAR(50) NOT NULL, -- cases, users, documents, calendar, etc.
    description TEXT,
    is_platform_permission BOOLEAN DEFAULT false, -- platform vs firm-level permission
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Define roles within law firms
CREATE TABLE roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    slug VARCHAR(100) NOT NULL, -- owner, senior_lawyer, junior_lawyer, assistant, secretary, client
    description TEXT,
    level INTEGER NOT NULL DEFAULT 0, -- hierarchy level (higher = more permissions)
    is_system_role BOOLEAN DEFAULT false, -- system-defined vs custom roles
    permissions JSONB DEFAULT '[]', -- array of permission strings
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(law_firm_id, slug)
);

-- Many-to-many relationship between roles and permissions
CREATE TABLE role_permissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    role_id UUID NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    permission_id UUID NOT NULL REFERENCES permissions(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(role_id, permission_id)
);

-- User role assignments within law firms
CREATE TABLE user_roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    role_id UUID NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    workspace_id UUID REFERENCES workspaces(id), -- role within specific workspace
    assigned_by UUID REFERENCES users(id),
    assigned_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE, -- optional role expiration
    is_active BOOLEAN DEFAULT true,
    UNIQUE(user_id, role_id, workspace_id)
);

-- Workspace access control within law firms
CREATE TABLE workspace_members (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    role_in_workspace VARCHAR(50) DEFAULT 'member', -- owner, admin, member, viewer
    added_by UUID REFERENCES users(id),
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT true,
    UNIQUE(workspace_id, user_id)
);

-- =====================================================
-- 5. CASE MANAGEMENT (Law Firm Scoped)
-- =====================================================

-- Case categories/types within law firms
CREATE TABLE case_categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    color VARCHAR(7), -- hex color for UI
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(law_firm_id, name)
);

-- Main cases table (law firm scoped)
CREATE TABLE cases (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    workspace_id UUID REFERENCES workspaces(id),
    case_number VARCHAR(100) NOT NULL, -- unique within law firm
    title VARCHAR(255) NOT NULL,
    description TEXT,
    case_category_id UUID REFERENCES case_categories(id),
    case_type VARCHAR(50) NOT NULL, -- civil, criminal, corporate, family, etc.
    status VARCHAR(50) DEFAULT 'active', -- active, pending, closed, archived
    priority VARCHAR(20) DEFAULT 'medium', -- low, medium, high, urgent
    estimated_value DECIMAL(15,2),
    actual_value DECIMAL(15,2),
    client_id UUID REFERENCES users(id), -- primary client
    lead_lawyer_id UUID REFERENCES users(id), -- primary lawyer
    court_name VARCHAR(255),
    judge_name VARCHAR(255),
    opposing_party VARCHAR(255),
    opposing_counsel VARCHAR(255),
    statute_of_limitations DATE,
    case_opened_date DATE,
    case_closed_date DATE,
    is_billable BOOLEAN DEFAULT true,
    billing_rate DECIMAL(10,2),
    metadata JSONB DEFAULT '{}', -- flexible field for case-specific data
    created_by UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(law_firm_id, case_number)
);

-- Case team assignments (multiple lawyers/staff per case)
CREATE TABLE case_assignments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    case_id UUID NOT NULL REFERENCES cases(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    role_in_case VARCHAR(50) NOT NULL, -- lead_lawyer, associate, paralegal, assistant
    assigned_by UUID REFERENCES users(id),
    assigned_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    removed_at TIMESTAMP WITH TIME ZONE,
    is_active BOOLEAN DEFAULT true,
    UNIQUE(case_id, user_id, role_in_case)
);

-- Case status history for tracking
CREATE TABLE case_status_history (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    case_id UUID NOT NULL REFERENCES cases(id) ON DELETE CASCADE,
    old_status VARCHAR(50),
    new_status VARCHAR(50) NOT NULL,
    reason TEXT,
    changed_by UUID NOT NULL REFERENCES users(id),
    changed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 6. DOCUMENT MANAGEMENT (Law Firm Scoped)
-- =====================================================

-- Document categories within law firms
CREATE TABLE document_categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(law_firm_id, name)
);

-- Documents table (law firm scoped with tenant isolation)
CREATE TABLE documents (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    case_id UUID REFERENCES cases(id) ON DELETE CASCADE,
    workspace_id UUID REFERENCES workspaces(id),
    category_id UUID REFERENCES document_categories(id),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    file_name VARCHAR(255) NOT NULL,
    file_path VARCHAR(500) NOT NULL, -- includes law_firm_id in path for isolation
    file_size BIGINT,
    file_type VARCHAR(100),
    mime_type VARCHAR(100),
    version INTEGER DEFAULT 1,
    parent_document_id UUID REFERENCES documents(id), -- for versioning
    is_confidential BOOLEAN DEFAULT false,
    is_client_accessible BOOLEAN DEFAULT false,
    checksum VARCHAR(255), -- for file integrity
    uploaded_by UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Document access permissions within law firms
CREATE TABLE document_permissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    document_id UUID NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(id),
    role_id UUID REFERENCES roles(id),
    permission_type VARCHAR(20) NOT NULL, -- view, download, edit, delete
    granted_by UUID NOT NULL REFERENCES users(id),
    granted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE,
    is_active BOOLEAN DEFAULT true
);

-- Document activity log within law firms
CREATE TABLE document_activity (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    document_id UUID NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id),
    action VARCHAR(50) NOT NULL, -- upload, view, download, edit, delete, share
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 7. CALENDAR AND SCHEDULING (Law Firm Scoped)
-- =====================================================

-- Calendar events within law firms
CREATE TABLE calendar_events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    workspace_id UUID REFERENCES workspaces(id),
    case_id UUID REFERENCES cases(id),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    event_type VARCHAR(50) NOT NULL, -- court_date, meeting, deadline, appointment
    start_date_time TIMESTAMP WITH TIME ZONE NOT NULL,
    end_date_time TIMESTAMP WITH TIME ZONE NOT NULL,
    is_all_day BOOLEAN DEFAULT false,
    location VARCHAR(255),
    is_recurring BOOLEAN DEFAULT false,
    recurrence_rule JSONB, -- RRULE format for recurring events
    court_room VARCHAR(100),
    judge_name VARCHAR(255),
    priority VARCHAR(20) DEFAULT 'medium',
    status VARCHAR(20) DEFAULT 'scheduled', -- scheduled, completed, cancelled, postponed
    created_by UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Event attendees within law firms
CREATE TABLE event_attendees (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id UUID NOT NULL REFERENCES calendar_events(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    attendance_type VARCHAR(20) DEFAULT 'required', -- required, optional, organizer
    response_status VARCHAR(20) DEFAULT 'pending', -- pending, accepted, declined, tentative
    responded_at TIMESTAMP WITH TIME ZONE,
    notes TEXT,
    UNIQUE(event_id, user_id)
);

-- =====================================================
-- 8. TASK MANAGEMENT (Law Firm Scoped)
-- =====================================================

-- Tasks table within law firms
CREATE TABLE tasks (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    workspace_id UUID REFERENCES workspaces(id),
    case_id UUID REFERENCES cases(id),
    parent_task_id UUID REFERENCES tasks(id), -- for subtasks
    title VARCHAR(255) NOT NULL,
    description TEXT,
    task_type VARCHAR(50) DEFAULT 'general', -- general, court_prep, research, filing
    status VARCHAR(20) DEFAULT 'pending', -- pending, in_progress, completed, cancelled
    priority VARCHAR(20) DEFAULT 'medium',
    assigned_to UUID REFERENCES users(id),
    assigned_by UUID REFERENCES users(id),
    due_date TIMESTAMP WITH TIME ZONE,
    estimated_hours DECIMAL(5,2),
    actual_hours DECIMAL(5,2),
    completion_percentage INTEGER DEFAULT 0,
    completed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Task comments and updates within law firms
CREATE TABLE task_comments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    task_id UUID NOT NULL REFERENCES tasks(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id),
    comment TEXT NOT NULL,
    hours_logged DECIMAL(5,2),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 9. NOTIFICATIONS (Law Firm Scoped)
-- =====================================================

-- Notification templates within law firms
CREATE TABLE notification_templates (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID REFERENCES law_firms(id), -- null for system-wide templates
    name VARCHAR(100) NOT NULL,
    type VARCHAR(50) NOT NULL, -- court_reminder, task_due, document_update, etc.
    subject_template TEXT NOT NULL,
    body_template TEXT NOT NULL,
    channels VARCHAR(50)[] DEFAULT ARRAY['email'], -- email, sms, in_app
    is_system_template BOOLEAN DEFAULT false,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- User notification preferences within law firms
CREATE TABLE user_notification_preferences (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    notification_type VARCHAR(50) NOT NULL,
    email_enabled BOOLEAN DEFAULT true,
    sms_enabled BOOLEAN DEFAULT false,
    in_app_enabled BOOLEAN DEFAULT true,
    advance_notice_hours INTEGER DEFAULT 24, -- how many hours before event to notify
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, notification_type)
);

-- Notification queue/log within law firms
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    template_id UUID REFERENCES notification_templates(id),
    type VARCHAR(50) NOT NULL,
    channel VARCHAR(20) NOT NULL, -- email, sms, in_app
    subject VARCHAR(255),
    body TEXT,
    reference_type VARCHAR(50), -- case, task, event, document
    reference_id UUID,
    status VARCHAR(20) DEFAULT 'pending', -- pending, sent, failed, read
    sent_at TIMESTAMP WITH TIME ZONE,
    read_at TIMESTAMP WITH TIME ZONE,
    error_message TEXT,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 10. AUDIT AND ACTIVITY LOGGING (Law Firm Scoped)
-- =====================================================

-- Law firm-level audit log
CREATE TABLE audit_logs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(id),
    action VARCHAR(100) NOT NULL,
    entity_type VARCHAR(50) NOT NULL, -- user, case, document, etc.
    entity_id UUID,
    old_values JSONB,
    new_values JSONB,
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 11. SYSTEM CONFIGURATION (Law Firm Scoped)
-- =====================================================

-- Law firm-specific settings
CREATE TABLE law_firm_settings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    key VARCHAR(100) NOT NULL,
    value JSONB NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(law_firm_id, key)
);

-- =====================================================
-- 12. USAGE TRACKING AND ANALYTICS
-- =====================================================

-- Track usage per law firm for billing and analytics
CREATE TABLE usage_metrics (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    metric_type VARCHAR(50) NOT NULL, -- storage_used, api_calls, active_users, etc.
    metric_value DECIMAL(15,2) NOT NULL,
    recorded_date DATE NOT NULL,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(law_firm_id, metric_type, recorded_date)
);

-- Track feature usage per law firm
CREATE TABLE feature_usage (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    law_firm_id UUID NOT NULL REFERENCES law_firms(id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(id),
    feature_name VARCHAR(100) NOT NULL,
    usage_count INTEGER DEFAULT 1,
    last_used_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    date_used DATE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(law_firm_id, user_id, feature_name, date_used)
);

-- =====================================================
-- 13. INDEXES FOR PERFORMANCE (Multi-Tenant Aware)
-- =====================================================

-- Platform-level indexes
CREATE INDEX idx_law_firms_slug ON law_firms(slug);
CREATE INDEX idx_law_firms_subscription_status ON law_firms(subscription_status);
CREATE INDEX idx_platform_users_email ON platform_users(email);

-- Multi-tenant aware indexes (law_firm_id first for partition efficiency)
CREATE INDEX idx_users_law_firm_email ON users(law_firm_id, email);
CREATE INDEX idx_users_law_firm_user_type ON users(law_firm_id, user_type);
CREATE INDEX idx_users_law_firm_active ON users(law_firm_id, is_active);

CREATE INDEX idx_cases_law_firm_status ON cases(law_firm_id, status);
CREATE INDEX idx_cases_law_firm_case_number ON cases(law_firm_id, case_number);
CREATE INDEX idx_cases_law_firm_client ON cases(law_firm_id, client_id);
CREATE INDEX idx_cases_law_firm_lawyer ON cases(law_firm_id, lead_lawyer_id);
CREATE INDEX idx_cases_law_firm_created ON cases(law_firm_id, created_at);

CREATE INDEX idx_documents_law_firm_case ON documents(law_firm_id, case_id);
CREATE INDEX idx_documents_law_firm_uploaded_by ON documents(law_firm_id, uploaded_by);

CREATE INDEX idx_calendar_events_law_firm_start ON calendar_events(law_firm_id, start_date_time);
CREATE INDEX idx_calendar_events_law_firm_type ON calendar_events(law_firm_id, event_type);

CREATE INDEX idx_tasks_law_firm_assigned ON tasks(law_firm_id, assigned_to);
CREATE INDEX idx_tasks_law_firm_status ON tasks(law_firm_id, status);
CREATE INDEX idx_tasks_law_firm_due ON tasks(law_firm_id, due_date);

-- RBAC indexes with tenant awareness
CREATE INDEX idx_user_roles_law_firm_user ON user_roles(user_id, law_firm_id);
CREATE INDEX idx_roles_law_firm_slug ON roles(law_firm_id, slug);
CREATE INDEX idx_workspace_members_law_firm ON workspace_members(workspace_id, user_id);

-- Audit log indexes
CREATE INDEX idx_audit_logs_law_firm_created ON audit_logs(law_firm_id, created_at);
CREATE INDEX idx_platform_audit_logs_created ON platform_audit_logs(created_at);

-- Usage tracking indexes
CREATE INDEX idx_usage_metrics_law_firm_date ON usage_metrics(law_firm_id, recorded_date);
CREATE INDEX idx_feature_usage_law_firm_date ON feature_usage(law_firm_id, date_used);

-- =====================================================
-- 14. ROW LEVEL SECURITY (RLS) FOR TENANT ISOLATION
-- =====================================================

-- Enable RLS on all law firm tables
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE cases ENABLE ROW LEVEL SECURITY;
ALTER TABLE documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE calendar_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE workspaces ENABLE ROW LEVEL SECURITY;
ALTER TABLE roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY;

-- Create RLS policies (examples - implement based on your application's session context)
-- You'll need to set the current law_firm_id in your application session

-- Example policy for users table
CREATE POLICY users_law_firm_isolation ON users
    USING (law_firm_id = current_setting('app.current_law_firm_id')::UUID);

-- Example policy for cases table
CREATE POLICY cases_law_firm_isolation ON cases
    USING (law_firm_id = current_setting('app.current_law_firm_id')::UUID);

-- Similar policies should be created for all law firm-scoped tables

-- =====================================================
-- 15. INITIAL DATA SETUP
-- =====================================================

-- Insert default subscription plans
INSERT INTO subscription_plans (name, slug, description, price_monthly, price_yearly, max_users, max_cases, max_storage_gb, features) VALUES 
('Starter', 'starter', 'Perfect for small law firms', 49.99, 499.99, 5, 50, 10, 
 '["basic_case_management", "document_storage", "calendar", "client_portal"]'::jsonb),
('Professional', 'professional', 'For growing law firms', 99.99, 999.99, 15, 200, 50, 
 '["advanced_case_management", "document_storage", "calendar", "client_portal", "task_management", "reporting"]'::jsonb),
('Enterprise', 'enterprise', 'For large law firms', 199.99, 1999.99, 50, 1000, 200, 
 '["all_features", "api_access", "custom_integrations", "priority_support"]'::jsonb);

-- Insert default platform permissions
INSERT INTO permissions (name, slug, category, description, is_platform_permission) VALUES 
-- Platform-level permissions
('Manage Law Firms', 'platform.law_firms.manage', 'platform', 'Create and manage law firm accounts', true),
('View Analytics', 'platform.analytics.view', 'platform', 'View platform-wide analytics', true),
('Manage Billing', 'platform.billing.manage', 'platform', 'Manage billing and subscriptions', true),
('Support Access', 'platform.support.access', 'platform', 'Access law firm accounts for support', true),

-- Law firm-level permissions
('View Users', 'users.view', 'users', 'View user profiles and information', false),
('Create Users', 'users.create', 'users', 'Create new user accounts', false),
('Edit Users', 'users.edit', 'users', 'Edit user information', false),
('Delete Users', 'users.delete', 'users', 'Delete user accounts', false),
('Manage Roles', 'users.manage_roles', 'users', 'Assign and manage user roles', false),

('View Cases', 'cases.view', 'cases', 'View case information', false),
('Create Cases', 'cases.create', 'cases', 'Create new cases', false),
('Edit Cases', 'cases.edit', 'cases', 'Edit case information', false),
('Delete Cases', 'cases.delete', 'cases', 'Delete cases', false),
('Assign Cases', 'cases.assign', 'cases', 'Assign cases to team members', false),
('View All Cases', 'cases.view_all', 'cases', 'View all cases in firm', false),

('View Documents', 'documents.view', 'documents', 'View documents', false),
('Upload Documents', 'documents.upload', 'documents', 'Upload new documents', false),
('Edit Documents', 'documents.edit', 'documents', 'Edit document information', false),
('Delete Documents', 'documents.delete', 'documents', 'Delete documents', false),
('Manage Document Permissions', 'documents.manage_permissions', 'documents', 'Manage document access', false),

('View Calendar', 'calendar.view', 'calendar', 'View calendar events', false),
('Create Events', 'calendar.create', 'calendar', 'Create calendar events', false),
('Edit Events', 'calendar.edit', 'calendar', 'Edit calendar events', false),
('Delete Events', 'calendar.delete', 'calendar', 'Delete calendar events', false),
('View All Calendars', 'calendar.view_all', 'calendar', 'View all team calendars', false),

('View Tasks', 'tasks.view', 'tasks', 'View tasks', false),
('Create Tasks', 'tasks.create', 'tasks', 'Create new tasks', false),
('Edit Tasks', 'tasks.edit', 'tasks', 'Edit task information', false),
('Delete Tasks', 'tasks.delete', 'tasks', 'Delete tasks', false),
('Assign Tasks', 'tasks.assign', 'tasks', 'Assign tasks to team members', false),

('Manage Firm Settings', 'admin.firm_settings', 'admin', 'Manage law firm settings', false),
('Manage Workspaces', 'admin.workspaces', 'admin', 'Manage workspaces', false),
('View Audit Logs', 'admin.audit_logs', 'admin', 'View firm audit logs', false);

-- Function to create default roles for a law firm
CREATE OR REPLACE FUNCTION create_default_law_firm_roles(firm_id UUID)
RETURNS VOID AS $$
BEGIN
    -- Law Firm Owner role (full access within firm)
    INSERT INTO roles (law_firm_id, name, slug, description, level, is_system_role, permissions)
    VALUES (firm_id, 'Law Firm Owner', 'owner', 'Full firm access and management', 100, true, 
            (SELECT json_agg(slug) FROM permissions WHERE is_platform_permission = false)::jsonb);
    
    -- Senior Lawyer role
    INSERT INTO roles (law_firm_id, name, slug, description, level, is_system_role, permissions)
    VALUES (firm_id, 'Senior Lawyer', 'senior_lawyer', 'Senior lawyer with case management and limited admin', 80, true, 
            '["cases.view_all", "cases.create", "cases.edit", "cases.assign", "documents.view", "documents.upload", "documents.edit", "calendar.view_all", "calendar.create", "calendar.edit", "tasks.view", "tasks.create", "tasks.edit", "tasks.assign", "users.view"]'::jsonb);
    
    -- Junior Lawyer role
    INSERT INTO roles (law_firm_id, name, slug, description, level, is_system_role, permissions)
    VALUES (firm_id, 'Junior Lawyer', 'junior_lawyer', 'Lawyer with assigned case management', 60, true, 
            '["cases.view", "cases.edit", "documents.view", "documents.upload", "documents.edit", "calendar.view", "calendar.create", "calendar.edit", "tasks.view", "tasks.create", "tasks.edit"]'::jsonb);
    
    -- Assistant role
    INSERT INTO roles (law_firm_id, name, slug, description, level, is_system_role, permissions)
    VALUES (firm_id, 'Assistant', 'assistant', 'Administrative assistant with document and scheduling access', 40, true, 
            '["cases.view", "documents.view", "documents.upload", "calendar.view", "calendar.create", "calendar.edit", "tasks.view", "tasks.edit"]'::jsonb);
    
    -- Secretary role
    INSERT INTO roles (law_firm_id, name, slug, description, level, is_system_role, permissions)
    VALUES (firm_id, 'Secretary', 'secretary', 'Secretary with basic administrative access', 30, true, 
            '["cases.view", "documents.view", "calendar.view", "calendar.create", "tasks.view"]'::jsonb);
    
    -- Client role
    INSERT INTO roles (law_firm_id, name, slug, description, level, is_system_role, permissions)
    VALUES (firm_id, 'Client', 'client', 'Client with limited access to their own cases', 10, true, 
            '["cases.view", "documents.view", "calendar.view"]'::jsonb);
END;
$$ LANGUAGE plpgsql;

-- Function to initialize a new law firm with default data
CREATE OR REPLACE FUNCTION initialize_law_firm(firm_id UUID)
RETURNS VOID AS $$
BEGIN
    -- Create default roles
    PERFORM create_default_law_firm_roles(firm_id);
    
    -- Create default workspace
    INSERT INTO workspaces (law_firm_id, name, description, workspace_type)
    VALUES (firm_id, 'General', 'Default workspace for the law firm', 'general');
    
    -- Create default case categories
    INSERT INTO case_categories (law_firm_id, name, description, color) VALUES
    (firm_id, 'Civil Litigation', 'Civil court cases', '#3B82F6'),
    (firm_id, 'Criminal Defense', 'Criminal court cases', '#EF4444'),
    (firm_id, 'Corporate Law', 'Business and corporate matters', '#10B981'),
    (firm_id, 'Family Law', 'Family and domestic matters', '#F59E0B'),
    (firm_id, 'Real Estate', 'Property and real estate matters', '#8B5CF6');
    
    -- Create default document categories
    INSERT INTO document_categories (law_firm_id, name, description) VALUES
    (firm_id, 'Pleadings', 'Court filings and pleadings'),
    (firm_id, 'Contracts', 'Contracts and agreements'),
    (firm_id, 'Evidence', 'Evidence and exhibits'),
    (firm_id, 'Correspondence', 'Letters and correspondence'),
    (firm_id, 'Research', 'Legal research and memos');
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- 16. TRIGGERS FOR AUTOMATIC UPDATES
-- =====================================================

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply updated_at trigger to relevant tables
CREATE TRIGGER update_law_firms_updated_at BEFORE UPDATE ON law_firms FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_workspaces_updated_at BEFORE UPDATE ON workspaces FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_roles_updated_at BEFORE UPDATE ON roles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_cases_updated_at BEFORE UPDATE ON cases FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_documents_updated_at BEFORE UPDATE ON documents FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_calendar_events_updated_at BEFORE UPDATE ON calendar_events FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tasks_updated_at BEFORE UPDATE ON tasks FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Function to create audit log entries (law firm level)
CREATE OR REPLACE FUNCTION create_audit_log()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO audit_logs (
        law_firm_id,
        user_id,
        action,
        entity_type,
        entity_id,
        old_values,
        new_values
    ) VALUES (
        COALESCE(NEW.law_firm_id, OLD.law_firm_id),
        current_setting('app.current_user_id', true)::UUID,
        TG_OP,
        TG_TABLE_NAME,
        COALESCE(NEW.id, OLD.id),
        CASE WHEN TG_OP = 'DELETE' THEN row_to_json(OLD) ELSE NULL END,
        CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN row_to_json(NEW) ELSE NULL END
    );
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

-- Function to create platform audit log entries
CREATE OR REPLACE FUNCTION create_platform_audit_log()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO platform_audit_logs (
        platform_user_id,
        law_firm_id,
        action,
        entity_type,
        entity_id,
        old_values,
        new_values
    ) VALUES (
        current_setting('app.current_platform_user_id', true)::UUID,
        COALESCE(NEW.id, OLD.id), -- assuming this is law_firms table
        TG_OP,
        TG_TABLE_NAME,
        COALESCE(NEW.id, OLD.id),
        CASE WHEN TG_OP = 'DELETE' THEN row_to_json(OLD) ELSE NULL END,
        CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN row_to_json(NEW) ELSE NULL END
    );
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

-- Apply audit triggers
CREATE TRIGGER audit_users AFTER INSERT OR UPDATE OR DELETE ON users FOR EACH ROW EXECUTE FUNCTION create_audit_log();
CREATE TRIGGER audit_cases AFTER INSERT OR UPDATE OR DELETE ON cases FOR EACH ROW EXECUTE FUNCTION create_audit_log();
CREATE TRIGGER audit_documents AFTER INSERT OR UPDATE OR DELETE ON documents FOR EACH ROW EXECUTE FUNCTION create_audit_log();
CREATE TRIGGER audit_user_roles AFTER INSERT OR UPDATE OR DELETE ON user_roles FOR EACH ROW EXECUTE FUNCTION create_audit_log();

-- Platform-level audit triggers
CREATE TRIGGER audit_law_firms AFTER INSERT OR UPDATE OR DELETE ON law_firms FOR EACH ROW EXECUTE FUNCTION create_platform_audit_log();

-- =====================================================
-- 17. UTILITY FUNCTIONS FOR SAAS MANAGEMENT
-- =====================================================

-- Function to check law firm usage limits
CREATE OR REPLACE FUNCTION check_law_firm_limits(firm_id UUID, limit_type VARCHAR(50))
RETURNS BOOLEAN AS $$
DECLARE
    current_count INTEGER;
    max_allowed INTEGER;
BEGIN
    SELECT 
        CASE limit_type
            WHEN 'users' THEN current_user_count
            WHEN 'cases' THEN current_case_count
            WHEN 'storage' THEN current_storage_gb::INTEGER
        END,
        CASE limit_type
            WHEN 'users' THEN max_users
            WHEN 'cases' THEN max_cases
            WHEN 'storage' THEN max_storage_gb
        END
    INTO current_count, max_allowed
    FROM law_firms
    WHERE id = firm_id;
    
    RETURN current_count < max_allowed;
END;
$$ LANGUAGE plpgsql;

-- Function to update law firm usage metrics
CREATE OR REPLACE FUNCTION update_law_firm_usage(firm_id UUID)
RETURNS VOID AS $$
BEGIN
    UPDATE law_firms SET
        current_user_count = (SELECT COUNT(*) FROM users WHERE law_firm_id = firm_id AND is_active = true),
        current_case_count = (SELECT COUNT(*) FROM cases WHERE law_firm_id = firm_id AND status != 'archived'),
        current_storage_gb = (SELECT COALESCE(SUM(file_size), 0) / (1024^3) FROM documents WHERE law_firm_id = firm_id),
        updated_at = NOW()
    WHERE id = firm_id;
END;
$$ LANGUAGE plpgsql;